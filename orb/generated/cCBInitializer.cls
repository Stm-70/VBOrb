VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cCBInitializer"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/CORBA.idl
'Target File Name: cCBInitializer.cls

Option Explicit

'struct ::CORBA::Initializer
Const sTypeId As String = "IDL:omg.org/CORBA/Initializer:1.0"

'Member(s)
Private members_ As cCBStructMemberSeq
Private name_ As String

'Member: members
Public Property Get members() As cCBStructMemberSeq
    Set members = members_
End Property

Public Property Set members(ByVal membersNew As cCBStructMemberSeq)
    Set members_ = membersNew
End Property

'Member: name
Public Property Get name() As String
    name = name_
End Property

Public Property Let name(ByVal nameNew As String)
    name_ = nameNew
End Property

'Helper
Public Sub initByRead(ByVal oIn As cOrbStream)
    On Error GoTo ErrHandler
    Set members_ = New cCBStructMemberSeq
    Call members_.initByRead(oIn, 0)
    name_ = oIn.readString()
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "Initializer.read")
End Sub

'Helper
Public Sub writeMe(ByVal oOut As cOrbStream)
    On Error GoTo ErrHandler
    Call members_.writeMe(oOut, 0)
    Call oOut.writeString(name_)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "Initializer.write")
End Sub

'Helper
Public Sub initByAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Set members_ = New cCBStructMemberSeq
    Call members_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    name_ = oAny.getString()
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "initByAny")
End Sub

'Helper
Public Sub insertIntoAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Call members_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call oAny.insertString(name_)
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "insertIntoAny")
End Sub
