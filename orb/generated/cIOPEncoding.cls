VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cIOPEncoding"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/IOP.idl
'Target File Name: cIOPEncoding.cls

Option Explicit

'struct ::IOP::Encoding
Const sTypeId As String = "IDL:omg.org/IOP/Encoding:1.0"

'Member(s)
Private format_ As Integer
Private major_version_ As Byte
Private minor_version_ As Byte

'Member: format
Public Property Get format() As Integer
    format = format_
End Property

Public Property Let format(ByVal formatNew As Integer)
    format_ = formatNew
End Property

'Member: major_version
Public Property Get major_version() As Byte
    major_version = major_version_
End Property

Public Property Let major_version(ByVal major_versionNew As Byte)
    major_version_ = major_versionNew
End Property

'Member: minor_version
Public Property Get minor_version() As Byte
    minor_version = minor_version_
End Property

Public Property Let minor_version(ByVal minor_versionNew As Byte)
    minor_version_ = minor_versionNew
End Property

'Helper
Public Sub initByRead(ByVal oIn As cOrbStream)
    On Error GoTo ErrHandler
    format_ = oIn.readShort()
    major_version_ = oIn.readOctet()
    minor_version_ = oIn.readOctet()
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "Encoding.read")
End Sub

'Helper
Public Sub writeMe(ByVal oOut As cOrbStream)
    On Error GoTo ErrHandler
    Call oOut.writeShort(format_)
    Call oOut.writeOctet(major_version_)
    Call oOut.writeOctet(minor_version_)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "Encoding.write")
End Sub

'Helper
Public Sub initByAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    format_ = oAny.getShort()
    Call oAny.nextPos
    major_version_ = oAny.getOctet()
    Call oAny.nextPos
    minor_version_ = oAny.getOctet()
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "initByAny")
End Sub

'Helper
Public Sub insertIntoAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Call oAny.insertShort(format_)
    Call oAny.nextPos
    Call oAny.insertOctet(major_version_)
    Call oAny.nextPos
    Call oAny.insertOctet(minor_version_)
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "insertIntoAny")
End Sub
