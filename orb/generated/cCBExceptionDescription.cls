VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cCBExceptionDescription"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/CORBA.idl
'Target File Name: cCBExceptionDescription.cls

Option Explicit

'struct ::CORBA::ExceptionDescription
Const sTypeId As String = "IDL:omg.org/CORBA/ExceptionDescription:1.0"

'Member(s)
Private name_ As String
Private id_ As String
Private defined_in_ As String
Private version_ As String
Private p_type_ As cOrbTypeCode

'Member: name
Public Property Get name() As String
    name = name_
End Property

Public Property Let name(ByVal nameNew As String)
    name_ = nameNew
End Property

'Member: id
Public Property Get id() As String
    id = id_
End Property

Public Property Let id(ByVal idNew As String)
    id_ = idNew
End Property

'Member: defined_in
Public Property Get defined_in() As String
    defined_in = defined_in_
End Property

Public Property Let defined_in(ByVal defined_inNew As String)
    defined_in_ = defined_inNew
End Property

'Member: version
Public Property Get version() As String
    version = version_
End Property

Public Property Let version(ByVal versionNew As String)
    version_ = versionNew
End Property

'Member: type
Public Property Get p_type() As cOrbTypeCode
    Set p_type = p_type_
End Property

Public Property Set p_type(ByVal typeNew As cOrbTypeCode)
    Set p_type_ = typeNew
End Property

'Helper
Public Sub initByRead(ByVal oIn As cOrbStream)
    On Error GoTo ErrHandler
    name_ = oIn.readString()
    id_ = oIn.readString()
    defined_in_ = oIn.readString()
    version_ = oIn.readString()
    Set p_type_ = oIn.readTypeCode()
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "ExceptionDescription.read")
End Sub

'Helper
Public Sub writeMe(ByVal oOut As cOrbStream)
    On Error GoTo ErrHandler
    Call oOut.writeString(name_)
    Call oOut.writeString(id_)
    Call oOut.writeString(defined_in_)
    Call oOut.writeString(version_)
    Call oOut.writeTypeCode(p_type_)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "ExceptionDescription.write")
End Sub

'Helper
Public Sub initByAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    name_ = oAny.getString()
    Call oAny.nextPos
    id_ = oAny.getString()
    Call oAny.nextPos
    defined_in_ = oAny.getString()
    Call oAny.nextPos
    version_ = oAny.getString()
    Call oAny.nextPos
    Set p_type_ = oAny.getTypecode()
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "initByAny")
End Sub

'Helper
Public Sub insertIntoAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Call oAny.insertString(name_)
    Call oAny.nextPos
    Call oAny.insertString(id_)
    Call oAny.nextPos
    Call oAny.insertString(defined_in_)
    Call oAny.nextPos
    Call oAny.insertString(version_)
    Call oAny.nextPos
    Call oAny.insertTypecode(p_type_)
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "insertIntoAny")
End Sub
