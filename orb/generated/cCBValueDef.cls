VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cCBValueDef"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/CORBA.idl
'Target File Name: cCBValueDef.cls

Option Explicit

Implements cOrbAbstractBase
Implements cOrbObject

'interface ::CORBA::ValueDef
Const sTypeId As String = "IDL:omg.org/CORBA/ValueDef:1.0"
Private oObjRef As cOrbObjRef

'Helper to get different COM interface
Friend Function thisOrbAbstractBase() As cOrbAbstractBase
    Set thisOrbAbstractBase = Me
End Function

'Helper
Private Function cOrbAbstractBase_isObjRef() As Boolean
    cOrbAbstractBase_isObjRef = True
End Function

'Helper to get different COM interface
Friend Function thisOrbObject() As cOrbObject
    Set thisOrbObject = Me
End Function

'Helper
Private Function cOrbObject_setObjRef(ByVal ObjRef As cOrbObjRef, _
    ByVal Check As Boolean) As Boolean
    On Error GoTo ErrHandler
    If ObjRef Is Nothing Then
        cOrbObject_setObjRef = True
    Else
        cOrbObject_setObjRef = False
        Call ObjRef.narrow(sTypeId, Check, False)
    End If
    Set oObjRef = ObjRef
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "setObjRef")
End Function

'Helper
Private Function cOrbObject_getObjRef() As cOrbObjRef
    Set cOrbObject_getObjRef = oObjRef
End Function

'Helper
Private Function cOrbObject_getId() As String
    cOrbObject_getId = sTypeId
End Function

'readonly attribute def_kind
Public Property Get defKind() As Long
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_def_kind", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    defKind = oIn.readUlong()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "defKind.Get")
End Property

'readonly attribute def_kind
Public Property Get defKind() As Long
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_def_kind", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    defKind = oIn.readUlong()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "defKind.Get")
End Property

'attribute id
Public Property Get id() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_id", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    id = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "id.Get")
End Property

Public Property Let id(ByVal idNew As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_id", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(idNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "id.Let")
End Property

'attribute name
Public Property Get name() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_name", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    name = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "name.Get")
End Property

Public Property Let name(ByVal nameNew As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_name", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(nameNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "name.Let")
End Property

'attribute version
Public Property Get version() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_version", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    version = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "version.Get")
End Property

Public Property Let version(ByVal versionNew As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_version", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(versionNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "version.Let")
End Property

'readonly attribute defined_in
Public Property Get definedIn() As cCBContainer
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_defined_in", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set definedIn = mCBContainer.narrow(oIn.readObject())
    Exit Property
ErrHandler:
    Set definedIn = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "definedIn.Get")
End Property

'readonly attribute absolute_name
Public Property Get absoluteName() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_absolute_name", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    absoluteName = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "absoluteName.Get")
End Property

'readonly attribute containing_repository
Public Property Get containingRepository() As cCBRepository
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_containing_repository", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set containingRepository = mCBRepository.narrow(oIn.readObject())
    Exit Property
ErrHandler:
    Set containingRepository = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "containingRepository.Get")
End Property

'readonly attribute def_kind
Public Property Get defKind() As Long
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_def_kind", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    defKind = oIn.readUlong()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "defKind.Get")
End Property

'readonly attribute type
Public Property Get typeProp() As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_type", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set typeProp = oIn.readTypeCode()
    Exit Property
ErrHandler:
    Set typeProp = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "typeProp.Get")
End Property

'attribute supported_interfaces
Public Property Get supportedInterfaces() As cCBInterfaceDefSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_supported_interfaces", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set supportedInterfaces = New cCBInterfaceDefSeq
    Call supportedInterfaces.initByRead(oIn, 0)
    Exit Property
ErrHandler:
    Set supportedInterfaces = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "supportedInterfaces.Get")
End Property

Public Property Set supportedInterfaces(ByVal supported_interfacesNew _
    As cCBInterfaceDefSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_supported_interfaces", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call supported_interfacesNew.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "supportedInterfaces.Set")
End Property

'attribute initializers
Public Property Get initializers() As cCBInitializerSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_initializers", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set initializers = New cCBInitializerSeq
    Call initializers.initByRead(oIn, 0)
    Exit Property
ErrHandler:
    Set initializers = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "initializers.Get")
End Property

Public Property Set initializers(ByVal initializersNew As cCBInitializerSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_initializers", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call initializersNew.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "initializers.Set")
End Property

'attribute base_value
Public Property Get baseValue() As cCBValueDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_base_value", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set baseValue = mCBValueDef.narrow(oIn.readObject())
    Exit Property
ErrHandler:
    Set baseValue = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "baseValue.Get")
End Property

Public Property Set baseValue(ByVal base_valueNew As cCBValueDef)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_base_value", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeObject(base_valueNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "baseValue.Set")
End Property

'attribute abstract_base_values
Public Property Get abstractBaseValues() As cCBValueDefSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_abstract_base_values", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set abstractBaseValues = New cCBValueDefSeq
    Call abstractBaseValues.initByRead(oIn, 0)
    Exit Property
ErrHandler:
    Set abstractBaseValues = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "abstractBaseValues.Get")
End Property

Public Property Set abstractBaseValues(ByVal abstract_base_valuesNew _
    As cCBValueDefSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_abstract_base_values", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call abstract_base_valuesNew.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "abstractBaseValues.Set")
End Property

'attribute is_abstract
Public Property Get isAbstract() As Boolean
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_is_abstract", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    isAbstract = oIn.readBoolean()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "isAbstract.Get")
End Property

Public Property Let isAbstract(ByVal is_abstractNew As Boolean)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_is_abstract", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeBoolean(is_abstractNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "isAbstract.Let")
End Property

'attribute is_custom
Public Property Get isCustom() As Boolean
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_is_custom", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    isCustom = oIn.readBoolean()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "isCustom.Get")
End Property

Public Property Let isCustom(ByVal is_customNew As Boolean)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_is_custom", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeBoolean(is_customNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "isCustom.Let")
End Property

'attribute is_truncatable
Public Property Get isTruncatable() As Boolean
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_is_truncatable", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    isTruncatable = oIn.readBoolean()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "isTruncatable.Get")
End Property

Public Property Let isTruncatable(ByVal is_truncatableNew As Boolean)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_is_truncatable", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeBoolean(is_truncatableNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "isTruncatable.Let")
End Property

'destroy()
Public Sub destroy()
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("destroy", False)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "destroy")
End Sub

'lookup()
Public Function lookup(ByVal search_name As String) As cCBContained
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("lookup", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(search_name)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set lookup = mCBContained.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set lookup = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "lookup")
End Function

'contents()
Public Function contents(ByVal limit_type As Long, _
    ByVal exclude_inherited As Boolean) As cCBContainedSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("contents", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(limit_type)
    Call oOut.writeBoolean(exclude_inherited)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set contents = New cCBContainedSeq
    Call contents.initByRead(oIn, 0)
    Exit Function
ErrHandler:
    Set contents = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "contents")
End Function

'lookup_name()
Public Function lookupName(ByVal search_name As String, _
    ByVal levels_to_search As Long, ByVal limit_type As Long, _
    ByVal exclude_inherited As Boolean) As cCBContainedSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("lookup_name", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(search_name)
    Call oOut.writeLong(levels_to_search)
    Call oOut.writeUlong(limit_type)
    Call oOut.writeBoolean(exclude_inherited)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set lookupName = New cCBContainedSeq
    Call lookupName.initByRead(oIn, 0)
    Exit Function
ErrHandler:
    Set lookupName = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "lookupName")
End Function

'describe_contents()
Public Function describeContents(ByVal limit_type As Long, _
    ByVal exclude_inherited As Boolean, ByVal max_returned_objs As Long) _
    As cCBContainerDescriptionSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("describe_contents", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(limit_type)
    Call oOut.writeBoolean(exclude_inherited)
    Call oOut.writeLong(max_returned_objs)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set describeContents = New cCBContainerDescriptionSeq
    Call describeContents.initByRead(oIn, 0)
    Exit Function
ErrHandler:
    Set describeContents = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "describeContents")
End Function

'create_module()
Public Function createModule(ByVal id As String, ByVal name As String, _
    ByVal version As String) As cCBModuleDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_module", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createModule = mCBModuleDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createModule = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createModule")
End Function

'create_constant()
Public Function createConstant(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal type_ As cCBIDLType, ByVal value As cOrbAny) _
    As cCBConstantDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_constant", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeObject(type_)
    Call oOut.writeAny(value)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createConstant = mCBConstantDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createConstant = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createConstant")
End Function

'create_struct()
Public Function createStruct(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal members As cCBStructMemberSeq) _
    As cCBStructDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_struct", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createStruct = mCBStructDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createStruct = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createStruct")
End Function

'create_union()
Public Function createUnion(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal discriminator_type As cCBIDLType, _
    ByVal members As cCBUnionMemberSeq) As cCBUnionDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_union", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeObject(discriminator_type)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createUnion = mCBUnionDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createUnion = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createUnion")
End Function

'create_enum()
Public Function createEnum(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal members As c_StringSeq) As cCBEnumDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_enum", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createEnum = mCBEnumDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createEnum = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createEnum")
End Function

'create_alias()
Public Function createAlias(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal original_type As cCBIDLType) As cCBAliasDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_alias", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeObject(original_type)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createAlias = mCBAliasDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createAlias = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createAlias")
End Function

'create_interface()
Public Function createInterface(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal base_interfaces As cCBInterfaceDefSeq) _
    As cCBInterfaceDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_interface", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call base_interfaces.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createInterface = mCBInterfaceDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createInterface = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createInterface")
End Function

'create_value()
Public Function createValue(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal is_custom As Boolean, _
    ByVal is_abstract As Boolean, ByVal base_value As cCBValueDef, _
    ByVal is_truncatable As Boolean, ByVal abstract_base_values As cCBValueDefSeq, _
    ByVal supported_interfaces As cCBInterfaceDefSeq, _
    ByVal initializers As cCBInitializerSeq) As cCBValueDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_value", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeBoolean(is_custom)
    Call oOut.writeBoolean(is_abstract)
    Call oOut.writeObject(base_value)
    Call oOut.writeBoolean(is_truncatable)
    Call abstract_base_values.writeMe(oOut, 0)
    Call supported_interfaces.writeMe(oOut, 0)
    Call initializers.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createValue = mCBValueDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createValue = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createValue")
End Function

'create_value_box()
Public Function createValueBox(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal original_type_def As cCBIDLType) _
    As cCBValueBoxDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_value_box", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeObject(original_type_def)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createValueBox = mCBValueBoxDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createValueBox = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createValueBox")
End Function

'create_exception()
Public Function createException(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal members As cCBStructMemberSeq) _
    As cCBExceptionDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_exception", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createException = mCBExceptionDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createException = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createException")
End Function

'create_native()
Public Function createNative(ByVal id As String, ByVal name As String, _
    ByVal version As String) As cCBNativeDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_native", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createNative = mCBNativeDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createNative = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createNative")
End Function

'create_abstract_interface()
Public Function createAbstractInterface(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal base_interfaces As cCBAbstractInterfaceDefSeq) _
    As cCBAbstractInterfaceDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_abstract_interface", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call base_interfaces.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createAbstractInterface = mCBAbstractInterfaceDef.narrow( _
        oIn.readObject())
    Exit Function
ErrHandler:
    Set createAbstractInterface = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createAbstractInterface")
End Function

'create_local_interface()
Public Function createLocalInterface(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal base_interfaces As cCBInterfaceDefSeq) _
    As cCBLocalInterfaceDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_local_interface", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call base_interfaces.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createLocalInterface = mCBLocalInterfaceDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createLocalInterface = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createLocalInterface")
End Function

'destroy()
Public Sub destroy()
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("destroy", False)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "destroy")
End Sub

'describe()
Public Function describe() As cCBContainedDescription
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("describe", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set describe = New cCBContainedDescription
    Call describe.initByRead(oIn)
    Exit Function
ErrHandler:
    Set describe = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "describe")
End Function

'move()
Public Sub move(ByVal new_container As cCBContainer, ByVal new_name As String, _
    ByVal new_version As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("move", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeObject(new_container)
    Call oOut.writeString(new_name)
    Call oOut.writeString(new_version)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "move")
End Sub

'destroy()
Public Sub destroy()
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("destroy", False)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "destroy")
End Sub

'is_a()
Public Function isA(ByVal id As String) As Boolean
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("is_a", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    isA = oIn.readBoolean()
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "isA")
End Function

'describe_value()
Public Function describeValue() As cCBValueDefFullValueDescription
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("describe_value", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set describeValue = New cCBValueDefFullValueDescription
    Call describeValue.initByRead(oIn)
    Exit Function
ErrHandler:
    Set describeValue = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "describeValue")
End Function

'create_value_member()
Public Function createValueMember(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal type_ As cCBIDLType, ByVal access As Integer) _
    As cCBValueMemberDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_value_member", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeObject(type_)
    Call oOut.writeShort(access)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createValueMember = mCBValueMemberDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createValueMember = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createValueMember")
End Function

'create_attribute()
Public Function createAttribute(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal type_ As cCBIDLType, ByVal mode As Long) _
    As cCBAttributeDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_attribute", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeObject(type_)
    Call oOut.writeUlong(mode)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createAttribute = mCBAttributeDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createAttribute = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createAttribute")
End Function

'create_operation()
Public Function createOperation(ByVal id As String, ByVal name As String, _
    ByVal version As String, ByVal result As cCBIDLType, ByVal mode As Long, _
    ByVal params As cCBParameterDescriptionSeq, _
    ByVal exceptions As cCBExceptionDefSeq, ByVal contexts As c_StringSeq) _
    As cCBOperationDef
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_operation", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeString(version)
    Call oOut.writeObject(result)
    Call oOut.writeUlong(mode)
    Call params.writeMe(oOut, 0)
    Call exceptions.writeMe(oOut, 0)
    Call contexts.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createOperation = mCBOperationDef.narrow(oIn.readObject())
    Exit Function
ErrHandler:
    Set createOperation = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createOperation")
End Function
