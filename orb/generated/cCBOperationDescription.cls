VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cCBOperationDescription"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/CORBA.idl
'Target File Name: cCBOperationDescription.cls

Option Explicit

'struct ::CORBA::OperationDescription
Const sTypeId As String = "IDL:omg.org/CORBA/OperationDescription:1.0"

'Member(s)
Private name_ As String
Private id_ As String
Private defined_in_ As String
Private version_ As String
Private result_ As cOrbTypeCode
Private mode_ As Long
Private contexts_ As c_StringSeq
Private parameters_ As cCBParameterDescriptionSeq
Private exceptions_ As cCBExceptionDescriptionSeq

'Member: name
Public Property Get name() As String
    name = name_
End Property

Public Property Let name(ByVal nameNew As String)
    name_ = nameNew
End Property

'Member: id
Public Property Get id() As String
    id = id_
End Property

Public Property Let id(ByVal idNew As String)
    id_ = idNew
End Property

'Member: defined_in
Public Property Get defined_in() As String
    defined_in = defined_in_
End Property

Public Property Let defined_in(ByVal defined_inNew As String)
    defined_in_ = defined_inNew
End Property

'Member: version
Public Property Get version() As String
    version = version_
End Property

Public Property Let version(ByVal versionNew As String)
    version_ = versionNew
End Property

'Member: result
Public Property Get result() As cOrbTypeCode
    Set result = result_
End Property

Public Property Set result(ByVal resultNew As cOrbTypeCode)
    Set result_ = resultNew
End Property

'Member: mode
Public Property Get mode() As Long
    mode = mode_
End Property

Public Property Let mode(ByVal modeNew As Long)
    mode_ = modeNew
End Property

'Member: contexts
Public Property Get contexts() As c_StringSeq
    Set contexts = contexts_
End Property

Public Property Set contexts(ByVal contextsNew As c_StringSeq)
    Set contexts_ = contextsNew
End Property

'Member: parameters
Public Property Get parameters() As cCBParameterDescriptionSeq
    Set parameters = parameters_
End Property

Public Property Set parameters(ByVal parametersNew _
    As cCBParameterDescriptionSeq)
    Set parameters_ = parametersNew
End Property

'Member: exceptions
Public Property Get exceptions() As cCBExceptionDescriptionSeq
    Set exceptions = exceptions_
End Property

Public Property Set exceptions(ByVal exceptionsNew _
    As cCBExceptionDescriptionSeq)
    Set exceptions_ = exceptionsNew
End Property

'Helper
Public Sub initByRead(ByVal oIn As cOrbStream)
    On Error GoTo ErrHandler
    name_ = oIn.readString()
    id_ = oIn.readString()
    defined_in_ = oIn.readString()
    version_ = oIn.readString()
    Set result_ = oIn.readTypeCode()
    mode_ = oIn.readUlong()
    Set contexts_ = New c_StringSeq
    Call contexts_.initByRead(oIn, 0)
    Set parameters_ = New cCBParameterDescriptionSeq
    Call parameters_.initByRead(oIn, 0)
    Set exceptions_ = New cCBExceptionDescriptionSeq
    Call exceptions_.initByRead(oIn, 0)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "OperationDescription.read")
End Sub

'Helper
Public Sub writeMe(ByVal oOut As cOrbStream)
    On Error GoTo ErrHandler
    Call oOut.writeString(name_)
    Call oOut.writeString(id_)
    Call oOut.writeString(defined_in_)
    Call oOut.writeString(version_)
    Call oOut.writeTypeCode(result_)
    Call oOut.writeUlong(mode_)
    Call contexts_.writeMe(oOut, 0)
    Call parameters_.writeMe(oOut, 0)
    Call exceptions_.writeMe(oOut, 0)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "OperationDescription.write")
End Sub

'Helper
Public Sub initByAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    name_ = oAny.getString()
    Call oAny.nextPos
    id_ = oAny.getString()
    Call oAny.nextPos
    defined_in_ = oAny.getString()
    Call oAny.nextPos
    version_ = oAny.getString()
    Call oAny.nextPos
    Set result_ = oAny.getTypecode()
    Call oAny.nextPos
    mode_ = oAny.enumGetAsUlong()
    Call oAny.nextPos
    Set contexts_ = New c_StringSeq
    Call contexts_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Set parameters_ = New cCBParameterDescriptionSeq
    Call parameters_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Set exceptions_ = New cCBExceptionDescriptionSeq
    Call exceptions_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "initByAny")
End Sub

'Helper
Public Sub insertIntoAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Call oAny.insertString(name_)
    Call oAny.nextPos
    Call oAny.insertString(id_)
    Call oAny.nextPos
    Call oAny.insertString(defined_in_)
    Call oAny.nextPos
    Call oAny.insertString(version_)
    Call oAny.nextPos
    Call oAny.insertTypecode(result_)
    Call oAny.nextPos
    Call oAny.enumSetAsUlong(mode_)
    Call oAny.nextPos
    Call contexts_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call parameters_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call exceptions_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "insertIntoAny")
End Sub
