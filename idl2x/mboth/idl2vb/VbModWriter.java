/* Copyright (C) 1991-2012 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */
/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */
/* We do support the IEC 559 math functionality, real and complex.  */
/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
   Unicode 6.0.  */
/* We do not support C11 <threads.h>.  */
/*
   Copyright (c) 2000 Martin.Both

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Library General Public License for more details.
*/
package mboth.idl2vb;
import java.util.Hashtable;
import java.io.*;
/**
 * @author  Martin Both
 */
public class VbModWriter extends VbWriter
{
 /**
	 */
 private String modName;
 /** 
	 *  @param	path		
	 *  @param	modName		
	 *  @param	srcName		
	 *
	 *	@exception	IOException
	 */
 public VbModWriter(String path, String modName, String srcName)
  throws IOException
 {
  super(path, modName + ".bas");
  this.modName= modName;
  if(vbProject != null)
   vbProject.addModule(path, modName);
  writeLine(ATTRIBUTE + SP + "VB_Name = \"" + modName + "\"");
  writeLine("'Generated by IDL2VB v" + IDL2VB.sVersion
   + ". Copyright (c) 2000-2003 Martin.Both");
  writeLine("'Source File Name: " + srcName);
  writeLine();
  writeLine(OPTION + SP + EXPLICIT);
 }
 /** Writing narrow() or uncheckedNarrow()
	 * 
	 *	@param	check
	 *	@param	vbName
	 *	@exception	IOException
	 */
 public void writeAbsNarrow(boolean check, String vbName) throws IOException
 {
  String funcName= check? VbWriter.NARROW: VbWriter.UNCHECKEDNARROW;
  writeFuncHead(PUBLIC, funcName);
  writeFuncArg(BYVAL, "Abstr", CORBABSTRACTBASE, null);
  writeFuncBody(vbName, true);
  writeIf("Abstr" + SP + IS + SP + NOTHING);
  writeThen();
   writeLine(SET + SP + funcName + " = " + NOTHING);
  writeElseIf("Abstr" + ".isObjRef()");
  writeThen();
   writeDimLine("Obj", CORBOBJECT);
   writeLine(SET + SP + "Obj" + " = " + "Abstr");
   writeDimLine("oObj", CORBOBJECT);
   writeLine(SET + SP + "oObj" + " = " + NEW + SP + vbName);
   writeIf("oObj.setObjRef(" + "Obj" + ".getObjRef(), "
    + (check? TRUE: FALSE) + ")");
   writeThen();
    writeLine(SET + SP + funcName + " = " + NOTHING);
   writeElse();
    writeLine(SET + SP + funcName + " = " + "oObj");
   writeEndIf();
  writeElse();
   writeLine(SET + SP + funcName + " = " + "Abstr");
  writeEndIf();
  writeFuncTail(funcName, null);
 }
 /** Writing narrow() or uncheckedNarrow()
	 * 
	 *	@param	check
	 *	@param	vbName
	 *	@exception	IOException
	 */
 public void writeObjNarrow(boolean check, String vbName) throws IOException
 {
  String funcName= check? VbWriter.NARROW: VbWriter.UNCHECKEDNARROW;
  writeFuncHead(PUBLIC, funcName);
  writeFuncArg(BYVAL, "Obj", CORBOBJECT, null);
  writeFuncBody(vbName, true);
  writeIf("Obj" + SP + IS + SP + NOTHING);
  writeThen();
   writeLine(SET + SP + funcName + " = " + NOTHING);
  writeElse();
   writeDimLine("oObj", CORBOBJECT);
   //writeDimLine("oObj", vbName);
   writeLine(SET + SP + "oObj" + " = " + NEW + SP + vbName);
   writeIf("oObj.setObjRef(" + "Obj" + ".getObjRef(), "
    + (check? TRUE: FALSE) + ")");
   //writeIf("oObj.thisOrbObject().setObjRef(" + "Obj" + ".getObjRef(), "
   //	+ (check? TRUE: FALSE) + ")");
   writeThen();
    writeLine(SET + SP + funcName + " = " + NOTHING);
   writeElse();
    writeLine(SET + SP + funcName + " = " + "oObj");
   writeEndIf();
  writeEndIf();
  writeFuncTail(funcName, null);
 }
}
