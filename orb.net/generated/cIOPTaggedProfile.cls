VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cIOPTaggedProfile"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/IOP.idl
'Target File Name: cIOPTaggedProfile.cls

Option Explicit

'struct ::IOP::TaggedProfile
Const sTypeId As String = "IDL:omg.org/IOP/TaggedProfile:1.0"

'Member(s)
Private tag_ As Long
Private profile_data_ As c_ByteSeq

'Member: tag
Public Property Get tag() As Long
    tag = tag_
End Property

Public Property Let tag(ByVal tagNew As Long)
    tag_ = tagNew
End Property

'Member: profile_data
Public Property Get profile_data() As c_ByteSeq
    Set profile_data = profile_data_
End Property

Public Property Set profile_data(ByVal profile_dataNew As c_ByteSeq)
    Set profile_data_ = profile_dataNew
End Property

'Helper
Public Sub initByRead(ByVal oIn As cOrbStream)
    On Error GoTo ErrHandler
    tag_ = oIn.readUlong()
    Set profile_data_ = New c_ByteSeq
    Call profile_data_.initByRead(oIn, 0)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "TaggedProfile.read")
End Sub

'Helper
Public Sub writeMe(ByVal oOut As cOrbStream)
    On Error GoTo ErrHandler
    Call oOut.writeUlong(tag_)
    Call profile_data_.writeMe(oOut, 0)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "TaggedProfile.write")
End Sub

'Helper
Public Sub initByAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    tag_ = oAny.getUlong()
    Call oAny.nextPos
    Set profile_data_ = New c_ByteSeq
    Call profile_data_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "initByAny")
End Sub

'Helper
Public Sub insertIntoAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Call oAny.insertUlong(tag_)
    Call oAny.nextPos
    Call profile_data_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "insertIntoAny")
End Sub
