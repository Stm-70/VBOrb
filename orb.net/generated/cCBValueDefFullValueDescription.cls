VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cCBValueDefFullValueDescription"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/CORBA.idl
'Target File Name: cCBValueDefFullValueDescription.cls

Option Explicit

'struct ::CORBA::ValueDef::FullValueDescription
Const sTypeId As String = "IDL:omg.org/CORBA/ValueDef/FullValueDescription:1.0"

'Member(s)
Private name_ As String
Private id_ As String
Private is_abstract_ As Boolean
Private is_custom_ As Boolean
Private defined_in_ As String
Private version_ As String
Private operations_ As cCBOperationDescriptionSeq
Private attributes_ As cCBAttributeDescriptionSeq
Private members_ As cCBValueMemberSeq
Private initializers_ As cCBInitializerSeq
Private supported_interfaces_ As c_StringSeq
Private abstract_base_values_ As c_StringSeq
Private is_truncatable_ As Boolean
Private base_value_ As String
Private p_type_ As cOrbTypeCode

'Member: name
Public Property Get name() As String
    name = name_
End Property

Public Property Let name(ByVal nameNew As String)
    name_ = nameNew
End Property

'Member: id
Public Property Get id() As String
    id = id_
End Property

Public Property Let id(ByVal idNew As String)
    id_ = idNew
End Property

'Member: is_abstract
Public Property Get is_abstract() As Boolean
    is_abstract = is_abstract_
End Property

Public Property Let is_abstract(ByVal is_abstractNew As Boolean)
    is_abstract_ = is_abstractNew
End Property

'Member: is_custom
Public Property Get is_custom() As Boolean
    is_custom = is_custom_
End Property

Public Property Let is_custom(ByVal is_customNew As Boolean)
    is_custom_ = is_customNew
End Property

'Member: defined_in
Public Property Get defined_in() As String
    defined_in = defined_in_
End Property

Public Property Let defined_in(ByVal defined_inNew As String)
    defined_in_ = defined_inNew
End Property

'Member: version
Public Property Get version() As String
    version = version_
End Property

Public Property Let version(ByVal versionNew As String)
    version_ = versionNew
End Property

'Member: operations
Public Property Get operations() As cCBOperationDescriptionSeq
    Set operations = operations_
End Property

Public Property Set operations(ByVal operationsNew _
    As cCBOperationDescriptionSeq)
    Set operations_ = operationsNew
End Property

'Member: attributes
Public Property Get attributes() As cCBAttributeDescriptionSeq
    Set attributes = attributes_
End Property

Public Property Set attributes(ByVal attributesNew _
    As cCBAttributeDescriptionSeq)
    Set attributes_ = attributesNew
End Property

'Member: members
Public Property Get members() As cCBValueMemberSeq
    Set members = members_
End Property

Public Property Set members(ByVal membersNew As cCBValueMemberSeq)
    Set members_ = membersNew
End Property

'Member: initializers
Public Property Get initializers() As cCBInitializerSeq
    Set initializers = initializers_
End Property

Public Property Set initializers(ByVal initializersNew As cCBInitializerSeq)
    Set initializers_ = initializersNew
End Property

'Member: supported_interfaces
Public Property Get supported_interfaces() As c_StringSeq
    Set supported_interfaces = supported_interfaces_
End Property

Public Property Set supported_interfaces(ByVal supported_interfacesNew _
    As c_StringSeq)
    Set supported_interfaces_ = supported_interfacesNew
End Property

'Member: abstract_base_values
Public Property Get abstract_base_values() As c_StringSeq
    Set abstract_base_values = abstract_base_values_
End Property

Public Property Set abstract_base_values(ByVal abstract_base_valuesNew _
    As c_StringSeq)
    Set abstract_base_values_ = abstract_base_valuesNew
End Property

'Member: is_truncatable
Public Property Get is_truncatable() As Boolean
    is_truncatable = is_truncatable_
End Property

Public Property Let is_truncatable(ByVal is_truncatableNew As Boolean)
    is_truncatable_ = is_truncatableNew
End Property

'Member: base_value
Public Property Get base_value() As String
    base_value = base_value_
End Property

Public Property Let base_value(ByVal base_valueNew As String)
    base_value_ = base_valueNew
End Property

'Member: type
Public Property Get p_type() As cOrbTypeCode
    Set p_type = p_type_
End Property

Public Property Set p_type(ByVal typeNew As cOrbTypeCode)
    Set p_type_ = typeNew
End Property

'Helper
Public Sub initByRead(ByVal oIn As cOrbStream)
    On Error GoTo ErrHandler
    name_ = oIn.readString()
    id_ = oIn.readString()
    is_abstract_ = oIn.readBoolean()
    is_custom_ = oIn.readBoolean()
    defined_in_ = oIn.readString()
    version_ = oIn.readString()
    Set operations_ = New cCBOperationDescriptionSeq
    Call operations_.initByRead(oIn, 0)
    Set attributes_ = New cCBAttributeDescriptionSeq
    Call attributes_.initByRead(oIn, 0)
    Set members_ = New cCBValueMemberSeq
    Call members_.initByRead(oIn, 0)
    Set initializers_ = New cCBInitializerSeq
    Call initializers_.initByRead(oIn, 0)
    Set supported_interfaces_ = New c_StringSeq
    Call supported_interfaces_.initByRead(oIn, 0)
    Set abstract_base_values_ = New c_StringSeq
    Call abstract_base_values_.initByRead(oIn, 0)
    is_truncatable_ = oIn.readBoolean()
    base_value_ = oIn.readString()
    Set p_type_ = oIn.readTypeCode()
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "FullValueDescription.read")
End Sub

'Helper
Public Sub writeMe(ByVal oOut As cOrbStream)
    On Error GoTo ErrHandler
    Call oOut.writeString(name_)
    Call oOut.writeString(id_)
    Call oOut.writeBoolean(is_abstract_)
    Call oOut.writeBoolean(is_custom_)
    Call oOut.writeString(defined_in_)
    Call oOut.writeString(version_)
    Call operations_.writeMe(oOut, 0)
    Call attributes_.writeMe(oOut, 0)
    Call members_.writeMe(oOut, 0)
    Call initializers_.writeMe(oOut, 0)
    Call supported_interfaces_.writeMe(oOut, 0)
    Call abstract_base_values_.writeMe(oOut, 0)
    Call oOut.writeBoolean(is_truncatable_)
    Call oOut.writeString(base_value_)
    Call oOut.writeTypeCode(p_type_)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "FullValueDescription.write")
End Sub

'Helper
Public Sub initByAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    name_ = oAny.getString()
    Call oAny.nextPos
    id_ = oAny.getString()
    Call oAny.nextPos
    is_abstract_ = oAny.getBoolean()
    Call oAny.nextPos
    is_custom_ = oAny.getBoolean()
    Call oAny.nextPos
    defined_in_ = oAny.getString()
    Call oAny.nextPos
    version_ = oAny.getString()
    Call oAny.nextPos
    Set operations_ = New cCBOperationDescriptionSeq
    Call operations_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Set attributes_ = New cCBAttributeDescriptionSeq
    Call attributes_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Set members_ = New cCBValueMemberSeq
    Call members_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Set initializers_ = New cCBInitializerSeq
    Call initializers_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Set supported_interfaces_ = New c_StringSeq
    Call supported_interfaces_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    Set abstract_base_values_ = New c_StringSeq
    Call abstract_base_values_.initByAny(oAny.currentComponent())
    Call oAny.nextPos
    is_truncatable_ = oAny.getBoolean()
    Call oAny.nextPos
    base_value_ = oAny.getString()
    Call oAny.nextPos
    Set p_type_ = oAny.getTypecode()
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "initByAny")
End Sub

'Helper
Public Sub insertIntoAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Call oAny.insertString(name_)
    Call oAny.nextPos
    Call oAny.insertString(id_)
    Call oAny.nextPos
    Call oAny.insertBoolean(is_abstract_)
    Call oAny.nextPos
    Call oAny.insertBoolean(is_custom_)
    Call oAny.nextPos
    Call oAny.insertString(defined_in_)
    Call oAny.nextPos
    Call oAny.insertString(version_)
    Call oAny.nextPos
    Call operations_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call attributes_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call members_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call initializers_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call supported_interfaces_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call abstract_base_values_.insertIntoAny(oAny.currentComponent())
    Call oAny.nextPos
    Call oAny.insertBoolean(is_truncatable_)
    Call oAny.nextPos
    Call oAny.insertString(base_value_)
    Call oAny.nextPos
    Call oAny.insertTypecode(p_type_)
    Call oAny.nextPos
    Call oAny.rewind
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "insertIntoAny")
End Sub
