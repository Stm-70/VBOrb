VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cCBOperationDef"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/CORBA.idl
'Target File Name: cCBOperationDef.cls

Option Explicit

Implements cOrbAbstractBase
Implements cOrbObject

'interface ::CORBA::OperationDef
Const sTypeId As String = "IDL:omg.org/CORBA/OperationDef:1.0"
Private oObjRef As cOrbObjRef

'Helper to get different COM interface
Friend Function thisOrbAbstractBase() As cOrbAbstractBase
    Set thisOrbAbstractBase = Me
End Function

'Helper
Private Function cOrbAbstractBase_isObjRef() As Boolean
    cOrbAbstractBase_isObjRef = True
End Function

'Helper to get different COM interface
Friend Function thisOrbObject() As cOrbObject
    Set thisOrbObject = Me
End Function

'Helper
Private Function cOrbObject_setObjRef(ByVal ObjRef As cOrbObjRef, _
    ByVal Check As Boolean) As Boolean
    On Error GoTo ErrHandler
    If ObjRef Is Nothing Then
        cOrbObject_setObjRef = True
    Else
        cOrbObject_setObjRef = False
        Call ObjRef.narrow(sTypeId, Check, False)
    End If
    Set oObjRef = ObjRef
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "setObjRef")
End Function

'Helper
Private Function cOrbObject_getObjRef() As cOrbObjRef
    Set cOrbObject_getObjRef = oObjRef
End Function

'Helper
Private Function cOrbObject_getId() As String
    cOrbObject_getId = sTypeId
End Function

'readonly attribute def_kind
Public Property Get defKind() As Long
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_def_kind", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    defKind = oIn.readUlong()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "defKind.Get")
End Property

'attribute id
Public Property Get id() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_id", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    id = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "id.Get")
End Property

Public Property Let id(ByVal idNew As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_id", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(idNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "id.Let")
End Property

'attribute name
Public Property Get name() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_name", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    name = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "name.Get")
End Property

Public Property Let name(ByVal nameNew As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_name", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(nameNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "name.Let")
End Property

'attribute version
Public Property Get version() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_version", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    version = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "version.Get")
End Property

Public Property Let version(ByVal versionNew As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_version", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(versionNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "version.Let")
End Property

'readonly attribute defined_in
Public Property Get definedIn() As cCBContainer
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_defined_in", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set definedIn = mCBContainer.narrow(oIn.readObject())
    Exit Property
ErrHandler:
    Set definedIn = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "definedIn.Get")
End Property

'readonly attribute absolute_name
Public Property Get absoluteName() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_absolute_name", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    absoluteName = oIn.readString()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "absoluteName.Get")
End Property

'readonly attribute containing_repository
Public Property Get containingRepository() As cCBRepository
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_containing_repository", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set containingRepository = mCBRepository.narrow(oIn.readObject())
    Exit Property
ErrHandler:
    Set containingRepository = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "containingRepository.Get")
End Property

'readonly attribute result
Public Property Get result() As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_result", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set result = oIn.readTypeCode()
    Exit Property
ErrHandler:
    Set result = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "result.Get")
End Property

'attribute result_def
Public Property Get resultDef() As cCBIDLType
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_result_def", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set resultDef = mCBIDLType.narrow(oIn.readObject())
    Exit Property
ErrHandler:
    Set resultDef = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "resultDef.Get")
End Property

Public Property Set resultDef(ByVal result_defNew As cCBIDLType)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_result_def", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeObject(result_defNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "resultDef.Set")
End Property

'attribute params
Public Property Get params() As cCBParameterDescriptionSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_params", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set params = New cCBParameterDescriptionSeq
    Call params.initByRead(oIn, 0)
    Exit Property
ErrHandler:
    Set params = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "params.Get")
End Property

Public Property Set params(ByVal paramsNew As cCBParameterDescriptionSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_params", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call paramsNew.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "params.Set")
End Property

'attribute mode
Public Property Get mode() As Long
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_mode", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    mode = oIn.readUlong()
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "mode.Get")
End Property

Public Property Let mode(ByVal modeNew As Long)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_mode", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(modeNew)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "mode.Let")
End Property

'attribute contexts
Public Property Get contexts() As c_StringSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_contexts", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set contexts = New c_StringSeq
    Call contexts.initByRead(oIn, 0)
    Exit Property
ErrHandler:
    Set contexts = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "contexts.Get")
End Property

Public Property Set contexts(ByVal contextsNew As c_StringSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_contexts", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call contextsNew.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "contexts.Set")
End Property

'attribute exceptions
Public Property Get exceptions() As cCBExceptionDefSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_get_exceptions", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set exceptions = New cCBExceptionDefSeq
    Call exceptions.initByRead(oIn, 0)
    Exit Property
ErrHandler:
    Set exceptions = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "exceptions.Get")
End Property

Public Property Set exceptions(ByVal exceptionsNew As cCBExceptionDefSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("_set_exceptions", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call exceptionsNew.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Property
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "exceptions.Set")
End Property

'destroy()
Public Sub destroy()
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("destroy", False)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "destroy")
End Sub

'describe()
Public Function describe() As cCBContainedDescription
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("describe", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set describe = New cCBContainedDescription
    Call describe.initByRead(oIn)
    Exit Function
ErrHandler:
    Set describe = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "describe")
End Function

'move()
Public Sub move(ByVal new_container As cCBContainer, ByVal new_name As String, _
    ByVal new_version As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("move", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeObject(new_container)
    Call oOut.writeString(new_name)
    Call oOut.writeString(new_version)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "move")
End Sub
