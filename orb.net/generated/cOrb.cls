VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "cOrb"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'Generated by IDL2VB v123. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../include/CORBA.idl
'Target File Name: cOrb.cls

Option Explicit

Implements cOrbAbstractBase
Implements cOrbObject

'interface ::CORBA::ORB
Const sTypeId As String = "IDL:omg.org/CORBA/ORB:1.0"
Private oObjRef As cOrbObjRef

'Helper to get different COM interface
Friend Function thisOrbAbstractBase() As cOrbAbstractBase
    Set thisOrbAbstractBase = Me
End Function

'Helper
Private Function cOrbAbstractBase_isObjRef() As Boolean
    cOrbAbstractBase_isObjRef = True
End Function

'Helper to get different COM interface
Friend Function thisOrbObject() As cOrbObject
    Set thisOrbObject = Me
End Function

'Helper
Private Function cOrbObject_setObjRef(ByVal ObjRef As cOrbObjRef, _
    ByVal Check As Boolean) As Boolean
    On Error GoTo ErrHandler
    If ObjRef Is Nothing Then
        cOrbObject_setObjRef = True
    Else
        cOrbObject_setObjRef = False
        Call ObjRef.narrow(sTypeId, Check, False)
    End If
    Set oObjRef = ObjRef
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "setObjRef")
End Function

'Helper
Private Function cOrbObject_getObjRef() As cOrbObjRef
    Set cOrbObject_getObjRef = oObjRef
End Function

'Helper
Private Function cOrbObject_getId() As String
    cOrbObject_getId = sTypeId
End Function

'id()
Public Function id() As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("id", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    id = oIn.readString()
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "id")
End Function

'object_to_string()
Public Function objectToString(ByVal obj As cOrbObject) As String
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("object_to_string", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeObject(obj)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    objectToString = oIn.readString()
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "objectToString")
End Function

'string_to_object()
Public Function stringToObject(ByVal str As String) As cOrbObject
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("string_to_object", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(str)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set stringToObject = oIn.readObject()
    Exit Function
ErrHandler:
    Set stringToObject = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "stringToObject")
End Function

'create_list()
Public Sub createList(ByVal count As Long, ByRef new_list As cOrbNVList)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_list", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeLong(count)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set new_list = mOrbNVList.narrow(oIn.readObject())
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "createList")
End Sub

'create_operation_list()
Public Sub createOperationList(ByVal oper As cCBOperationDef, _
    ByRef new_list As cOrbNVList)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_operation_list", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeObject(oper)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set new_list = mOrbNVList.narrow(oIn.readObject())
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "createOperationList")
End Sub

'get_default_context()
Public Sub getDefaultContext(ByRef ctx As cOrbContext)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("get_default_context", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set ctx = mOrbContext.narrow(oIn.readObject())
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "getDefaultContext")
End Sub

'send_multiple_requests_oneway()
Public Sub sendMultipleRequestsOneway(ByVal req As cOrbRequestSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("send_multiple_requests_oneway", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call req.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "sendMultipleRequestsOneway")
End Sub

'send_multiple_requests_deferred()
Public Sub sendMultipleRequestsDeferred(ByVal req As cOrbRequestSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("send_multiple_requests_deferred", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call req.writeMe(oOut, 0)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "sendMultipleRequestsDeferred")
End Sub

'poll_next_response()
Public Function pollNextResponse() As Boolean
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("poll_next_response", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    pollNextResponse = oIn.readBoolean()
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "pollNextResponse")
End Function

'get_next_response()
Public Sub getNextResponse(ByRef req As cOrbRequest)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("get_next_response", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set req = mOrbRequest.narrow(oIn.readObject())
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "getNextResponse")
End Sub

'get_service_information()
Public Function getServiceInformation(ByVal service_type As Integer, _
    ByRef service_information As cCBServiceInformation) As Boolean
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("get_service_information", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUshort(service_type)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    getServiceInformation = oIn.readBoolean()
    Set service_information = New cCBServiceInformation
    Call service_information.initByRead(oIn)
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "getServiceInformation")
End Function

'list_initial_services()
Public Function listInitialServices() As c_StringSeq
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("list_initial_services", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set listInitialServices = New c_StringSeq
    Call listInitialServices.initByRead(oIn, 0)
    Exit Function
ErrHandler:
    Set listInitialServices = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "listInitialServices")
End Function

'resolve_initial_references() raises(cOrbInvalidName)
Public Function resolveInitialReferences(ByVal identifier As String) _
    As cOrbObject
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("resolve_initial_references", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(identifier)
    Dim oIn As cOrbStream
    If oRequest.invokeReqst(True) Then
        Set oIn = oRequest.OutRes
        Dim sTypeId As String
        sTypeId = oIn.readString()
        Dim oUserEx As mVBOrb.VBOrb.cOrbException
        Select Case sTypeId
        Case "IDL:omg.org/CORBA/ORB/InvalidName:1.0"
            Set oUserEx = New cOrbInvalidName
            Call oUserEx.initByRead(oIn)
        Case Else
            Call mVBOrb.VBOrb.raiseUNKNOWN(1, mVBOrb.VBOrb.CompletedMAYBE, _
                "Undefined CORBA User Exception: [" & sTypeId & "]")
        End Select
        Call mVBOrb.VBOrb.raiseUserEx(oUserEx)
    Else
        Set oIn = oRequest.OutRes
        Set resolveInitialReferences = oIn.readObject()
    End If
    Exit Function
ErrHandler:
    Set resolveInitialReferences = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "resolveInitialReferences")
End Function

'create_struct_tc()
Public Function createStructTc(ByVal id As String, ByVal name As String, _
    ByVal members As cCBStructMemberSeq) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_struct_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createStructTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createStructTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createStructTc")
End Function

'create_union_tc()
Public Function createUnionTc(ByVal id As String, ByVal name As String, _
    ByVal discriminator_type As cOrbTypeCode, ByVal members As cCBUnionMemberSeq) _
    As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_union_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeTypeCode(discriminator_type)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createUnionTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createUnionTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createUnionTc")
End Function

'create_enum_tc()
Public Function createEnumTc(ByVal id As String, ByVal name As String, _
    ByVal members As c_StringSeq) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_enum_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createEnumTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createEnumTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createEnumTc")
End Function

'create_alias_tc()
Public Function createAliasTc(ByVal id As String, ByVal name As String, _
    ByVal original_type As cOrbTypeCode) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_alias_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeTypeCode(original_type)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createAliasTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createAliasTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createAliasTc")
End Function

'create_exception_tc()
Public Function createExceptionTc(ByVal id As String, ByVal name As String, _
    ByVal members As cCBStructMemberSeq) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_exception_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createExceptionTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createExceptionTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createExceptionTc")
End Function

'create_interface_tc()
Public Function createInterfaceTc(ByVal id As String, ByVal name As String) _
    As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_interface_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createInterfaceTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createInterfaceTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createInterfaceTc")
End Function

'create_string_tc()
Public Function createStringTc(ByVal bound As Long) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_string_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(bound)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createStringTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createStringTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createStringTc")
End Function

'create_wstring_tc()
Public Function createWstringTc(ByVal bound As Long) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_wstring_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(bound)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createWstringTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createWstringTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createWstringTc")
End Function

'create_fixed_tc()
Public Function createFixedTc(ByVal digits As Integer, ByVal scale_ As Integer) _
    As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_fixed_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUshort(digits)
    Call oOut.writeShort(scale_)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createFixedTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createFixedTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createFixedTc")
End Function

'create_sequence_tc()
Public Function createSequenceTc(ByVal bound As Long, _
    ByVal element_type As cOrbTypeCode) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_sequence_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(bound)
    Call oOut.writeTypeCode(element_type)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createSequenceTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createSequenceTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createSequenceTc")
End Function

'create_recursive_sequence_tc()
Public Function createRecursiveSequenceTc(ByVal bound As Long, _
    ByVal offset As Long) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_recursive_sequence_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(bound)
    Call oOut.writeUlong(offset)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createRecursiveSequenceTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createRecursiveSequenceTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createRecursiveSequenceTc")
End Function

'create_array_tc()
Public Function createArrayTc(ByVal length As Long, _
    ByVal element_type As cOrbTypeCode) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_array_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(length)
    Call oOut.writeTypeCode(element_type)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createArrayTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createArrayTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createArrayTc")
End Function

'create_value_tc()
Public Function createValueTc(ByVal id As String, ByVal name As String, _
    ByVal type_modifier As Integer, ByVal concrete_base As cOrbTypeCode, _
    ByVal members As cCBValueMemberSeq) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_value_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeShort(type_modifier)
    Call oOut.writeTypeCode(concrete_base)
    Call members.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createValueTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createValueTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createValueTc")
End Function

'create_value_box_tc()
Public Function createValueBoxTc(ByVal id As String, ByVal name As String, _
    ByVal boxed_type As cOrbTypeCode) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_value_box_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Call oOut.writeTypeCode(boxed_type)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createValueBoxTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createValueBoxTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createValueBoxTc")
End Function

'create_native_tc()
Public Function createNativeTc(ByVal id As String, ByVal name As String) _
    As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_native_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createNativeTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createNativeTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createNativeTc")
End Function

'create_recursive_tc()
Public Function createRecursiveTc(ByVal id As String) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_recursive_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createRecursiveTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createRecursiveTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createRecursiveTc")
End Function

'create_abstract_interface_tc()
Public Function createAbstractInterfaceTc(ByVal id As String, _
    ByVal name As String) As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_abstract_interface_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createAbstractInterfaceTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createAbstractInterfaceTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createAbstractInterfaceTc")
End Function

'create_local_interface_tc()
Public Function createLocalInterfaceTc(ByVal id As String, ByVal name As String) _
    As cOrbTypeCode
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_local_interface_tc", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeString(name)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set createLocalInterfaceTc = oIn.readTypeCode()
    Exit Function
ErrHandler:
    Set createLocalInterfaceTc = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createLocalInterfaceTc")
End Function

'work_pending()
Public Function workPending() As Boolean
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("work_pending", False)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    workPending = oIn.readBoolean()
    Exit Function
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "workPending")
End Function

'perform_work()
Public Sub performWork()
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("perform_work", False)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "performWork")
End Sub

'run()
Public Sub run()
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("run", False)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "run")
End Sub

'shutdown()
Public Sub shutdown(ByVal wait_for_completion As Boolean)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("shutdown", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeBoolean(wait_for_completion)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "shutdown")
End Sub

'destroy()
Public Sub destroy()
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("destroy", False)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "destroy")
End Sub

'create_policy() raises(cCBPolicyError)
Public Function createPolicy(ByVal type_ As Long, ByVal val As cOrbAny) _
    As cCBPolicy
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("create_policy", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeUlong(type_)
    Call oOut.writeAny(val)
    Dim oIn As cOrbStream
    If oRequest.invokeReqst(True) Then
        Set oIn = oRequest.OutRes
        Dim sTypeId As String
        sTypeId = oIn.readString()
        Dim oUserEx As mVBOrb.VBOrb.cOrbException
        Select Case sTypeId
        Case "IDL:omg.org/CORBA/PolicyError:1.0"
            Set oUserEx = New cCBPolicyError
            Call oUserEx.initByRead(oIn)
        Case Else
            Call mVBOrb.VBOrb.raiseUNKNOWN(1, mVBOrb.VBOrb.CompletedMAYBE, _
                "Undefined CORBA User Exception: [" & sTypeId & "]")
        End Select
        Call mVBOrb.VBOrb.raiseUserEx(oUserEx)
    Else
        Set oIn = oRequest.OutRes
        Set createPolicy = mCBPolicy.narrow(oIn.readObject())
    End If
    Exit Function
ErrHandler:
    Set createPolicy = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "createPolicy")
End Function

'register_value_factory()
Public Function registerValueFactory(ByVal id As String, _
    ByVal factory As OrbValueFactory) As OrbValueFactory
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("register_value_factory", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call factory.writeMe(oOut)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set registerValueFactory = New OrbValueFactory
    Call registerValueFactory.initByRead(oIn)
    Exit Function
ErrHandler:
    Set registerValueFactory = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "registerValueFactory")
End Function

'unregister_value_factory()
Public Sub unregisterValueFactory(ByVal id As String)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("unregister_value_factory", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oRequest.invokeReqst(False)
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "unregisterValueFactory")
End Sub

'lookup_value_factory()
Public Function lookupValueFactory(ByVal id As String) As OrbValueFactory
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("lookup_value_factory", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Dim oIn As cOrbStream
    Call oRequest.invokeReqst(False)
    Set oIn = oRequest.OutRes
    Set lookupValueFactory = New OrbValueFactory
    Call lookupValueFactory.initByRead(oIn)
    Exit Function
ErrHandler:
    Set lookupValueFactory = Nothing
    Call mVBOrb.VBOrb.ErrReraise(Err, "lookupValueFactory")
End Function

'register_initial_reference() raises(cOrbInvalidName)
Public Sub registerInitialReference(ByVal id As String, ByVal obj As cOrbObject)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("register_initial_reference", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeString(id)
    Call oOut.writeObject(obj)
    Dim oIn As cOrbStream
    If oRequest.invokeReqst(True) Then
        Set oIn = oRequest.OutRes
        Dim sTypeId As String
        sTypeId = oIn.readString()
        Dim oUserEx As mVBOrb.VBOrb.cOrbException
        Select Case sTypeId
        Case "IDL:omg.org/CORBA/ORB/InvalidName:1.0"
            Set oUserEx = New cOrbInvalidName
            Call oUserEx.initByRead(oIn)
        Case Else
            Call mVBOrb.VBOrb.raiseUNKNOWN(1, mVBOrb.VBOrb.CompletedMAYBE, _
                "Undefined CORBA User Exception: [" & sTypeId & "]")
        End Select
        Call mVBOrb.VBOrb.raiseUserEx(oUserEx)
    End If
    Exit Sub
ErrHandler:
    Call mVBOrb.VBOrb.ErrReraise(Err, "registerInitialReference")
End Sub
